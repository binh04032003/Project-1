module ALU_IEEE754(
    input signed [15:0] A_integer,    // Phan nguyen cua so thuc A (16 bit)
    input [31:0] A_fraction,          // Phan thap phan cua so thuc A(32 bit)
    input signed [15:0] B_integer,    // Phan nguyen cua so thuc B(16 bit)
    input [31:0] B_fraction,          // Phan thap phan cua so thuc B(32 bit)
    input [3:0] opcode,               // Su dung cho case xu ly cac chuc nang cua ALU (4 bit)
    output reg [31:0] A_binary,       // Day nhi phan duoc chuyen doi cua so thuc A(32 bit)
    output reg [31:0] B_binary,       // Day nhi phan duoc chuyen doi cua so thuc B(32 bit)
    output reg [31:0] A_IEEE754,      // So thuc A duoc chuan hoa IEEE 754(32 bit)
    output reg [31:0] B_IEEE754,      // So thuc B duoc chuan hoa IEEE 754(32 bit)
    output reg [31:0] result,         // Ket qua(32 bit)
    output reg carry                  // Bit nho
    );
    
    // Bien luu tru tam thoi cho so thuc A
    reg [31:0] A_fraction_binary;     // Bien luu tru phan thap phan cua so A bieu dien duoi dang nhi phan (32 bit)
    real A_fraction_real;             // Bien luu tru phan thap phan cua so A duoi dang so thuc
    integer A_integer_needed;         // Bien luu tru so bit can de bieu dien phan nguyen cua so A
    integer A_temp_integer;           // Bien luu tru tam thoi cho phan nguyen cua so A
    integer i;                        // Bien i su dung cho vong for
    reg [31:0] A_temp_binary;         // Bien luu tru tam thoi cho day nhi phan 32 bit cua so A
    integer A_leading_zero;           // Bien dem
    reg [7:0] A_exponent;             // 8 bit exponent cua A
    reg [22:0] A_mantissa;            // 23 bit mantissa cua A
    reg A_sign;                       // Bit dau cua A
    
    // Bien luu tru tam thoi cho so thuc B
    reg [31:0] B_fraction_binary;
    real B_fraction_real;
    integer B_integer_needed;
    integer B_temp_integer;
    reg [31:0] B_temp_binary;
    integer B_leading_zero;
    reg [7:0] B_exponent; 
    reg [22:0] B_mantissa;
    reg B_sign;
    
    // Bien xu ly so dau cham dong
    reg [23:0] A_IEEE754_mantissa, B_IEEE754_mantissa, temp_mantissa;
    reg [47:0] result_mantissa;
    reg [7:0] A_IEEE754_exponent, B_IEEE754_exponent, result_exponent, diff_exponent;
    reg A_IEEE754_sign, B_IEEE754_sign, result_sign;
    reg flag;
    

    
    always @(*) begin
           // Xac dinh dau cho so A
           A_sign = (A_integer < 0) ? 1'b1 : 1'b0;
           // Xac dinh dau cho so B
           B_sign = (B_integer < 0) ? 1'b1 : 1'b0;
           
      
           // Chuyen doi so A thanh day nhi phan 32 bit
                 // Tinh toan so bit can thiet de luu tru phan nguyen cua so A
                 A_integer_needed = 0;
                 A_temp_integer = (A_integer < 0) ? -A_integer : A_integer;
                 while (A_temp_integer > 0) begin
                       A_temp_integer = A_temp_integer >> 1;
                       A_integer_needed = A_integer_needed + 1;
                 end
                 
                 A_fraction_binary = 0;
                 // Xu ly phan thap phan cua so A
                 A_fraction_real = A_fraction / 1.0e9;
                 for (i = 0; i < (32 - A_integer_needed); i = i + 1) begin
                     A_fraction_real = A_fraction_real * 2;
                     if (A_fraction_real >= 1.0) begin
                         A_fraction_binary[(32 - A_integer_needed) - 1 - i] = 1;
                         A_fraction_real = A_fraction_real - 1.0;
                     end else begin
                         A_fraction_binary[(32 - A_integer_needed) - 1 - i] = 0;
                     end
                 end
                 // Luu ket qua day 32 bit nhi phan cua so A
                 A_binary = ((A_integer < 0) ? -A_integer : A_integer) << (32 - A_integer_needed) | A_fraction_binary;
                 
            // Chuyen doi so B thanh day nhi phan 32 bit
                 // Tinh toan so bit can thiet de luu tru phan nguyen cua B
                 B_integer_needed = 0;
                 B_temp_integer = (B_integer < 0) ? -B_integer : B_integer;
                 while (B_temp_integer > 0) begin
                       B_temp_integer = B_temp_integer >> 1;
                       B_integer_needed = B_integer_needed + 1;
                 end
                 
                 B_fraction_binary = 0;
                 // Xu ly phan thap phan cho so B
                 B_fraction_real = B_fraction / 1.0e9;
                 for (i = 0; i < (32 - B_integer_needed); i = i + 1) begin
                     B_fraction_real = B_fraction_real * 2;
                     if (B_fraction_real >= 1.0) begin
                         B_fraction_binary[(32 - B_integer_needed) - 1 - i] = 1;
                         B_fraction_real = B_fraction_real - 1.0;
                     end else begin
                         B_fraction_binary[(32 - B_integer_needed) - 1 - i] = 0;
                     end
                 end
                 // Luu ket qua day 32 bit nhi phan cua so B
                 B_binary = ((B_integer < 0) ? -B_integer : B_integer) << (32 - B_integer_needed) | B_fraction_binary;
                 
            // Chuan hoa IEEE 754 so A
                 // Dich trai so A cho den bit 1 dung dau tien
                 A_temp_binary = A_binary;
                 A_leading_zero = 0;
                 
                 while (A_temp_binary[31] == 0  && A_leading_zero < 32) begin
                       A_temp_binary = A_temp_binary << 1;
                       A_leading_zero = A_leading_zero + 1;
                 end
                 // Luu ket qua cho so A duoc chuan hoa IEEE754
                 A_exponent = 8'd127 + (A_integer_needed - 1) - A_leading_zero;
                 A_mantissa = A_temp_binary[30:8];
                 A_IEEE754 = {A_sign, A_exponent, A_mantissa};
                 
            // Chuan hoa IEEE 754 so B
                 // Dich trai so A cho den bit 1 dung dau tien
                 B_temp_binary = B_binary;
                 B_leading_zero = 0;
                 
                 while (B_temp_binary[31] == 0  && B_leading_zero < 32) begin
                       B_temp_binary = B_temp_binary << 1;
                       B_leading_zero = B_leading_zero + 1;
                 end
                 // Luu ket qua cho so B duoc chuan hoa IEEE 754
                 B_exponent = 8'd127 + (B_integer_needed - 1) - B_leading_zero;
                 B_mantissa = B_temp_binary[30:8];
                 B_IEEE754 = {B_sign, B_exponent, B_mantissa};
                 
                 case(opcode)
                      4'b0000: {carry, result} = A_binary + B_binary;  // Phep cong hai so nguyen
                      4'b0001: {carry, result} = A_binary - B_binary;  // Phep tru hai so nguyen
                      4'b0010: result = A_binary & B_binary;           // Logic and
                      4'b0011: result = A_binary | B_binary;           // Logic or
                      4'b0100: result = A_binary ^ B_binary;           // Logic xor
                      4'b0101: result = ~A_binary;                     // Logic not
                      4'b0110: result = A_binary << 1;                 // Dich trai 1 bit
                      4'b0111: result = A_binary >> 1;                 // Dich phai 1 bit
                      4'b1000: begin                                   // Phep cong hai so thuc dau phay dong
                      
                          A_IEEE754_sign = A_IEEE754[31];
                          B_IEEE754_sign = B_IEEE754[31];
                          A_IEEE754_exponent = A_IEEE754[30:23];
                          B_IEEE754_exponent = B_IEEE754[30:23];
                          A_IEEE754_mantissa = {1'b1, A_IEEE754[22:0]};
                          B_IEEE754_mantissa = {1'b1, B_IEEE754[22:0]};

                          if (A_IEEE754_exponent >= B_IEEE754_exponent) begin
                              diff_exponent = A_IEEE754_exponent - B_IEEE754_exponent;
                              B_IEEE754_mantissa = B_IEEE754_mantissa >> diff_exponent;
                              result_exponent = A_IEEE754_exponent;
                          end else begin
                              diff_exponent = B_IEEE754_exponent - A_IEEE754_exponent;
                              A_IEEE754_mantissa = A_IEEE754_mantissa >> diff_exponent;
                              result_exponent = B_IEEE754_exponent;
                          end

                          if (A_IEEE754_sign == B_IEEE754_sign) begin
                              {carry, temp_mantissa} = A_IEEE754_mantissa + B_IEEE754_mantissa;
                              result_sign = A_IEEE754_sign;
                              end else begin
                                  if (A_IEEE754_mantissa >= B_IEEE754_mantissa) begin
                                     {carry, temp_mantissa} = A_IEEE754_mantissa - B_IEEE754_mantissa;
                                     result_sign = A_IEEE754_sign;
                                  end else begin
                                     {carry, temp_mantissa} = B_IEEE754_mantissa - A_IEEE754_mantissa;
                                     result_sign = B_IEEE754_sign;
                                  end
                               end

                          if (carry) begin
                               temp_mantissa = temp_mantissa >> 1;
                               result_exponent = result_exponent + 1;
                          end else begin
                              while (temp_mantissa[23] == 0 && result_exponent > 0) begin
                                      temp_mantissa = temp_mantissa << 1;
                                      result_exponent = result_exponent - 1;
                               end
                          end

                         result = {result_sign, result_exponent, temp_mantissa[22:0]};
                     end
                     4'b1001: begin                                                   // Phep nhan hai so thuc dau phay dong
                          A_IEEE754_sign = A_IEEE754[31];
                          B_IEEE754_sign = B_IEEE754[31];
                          A_IEEE754_exponent = A_IEEE754[30:23];
                          B_IEEE754_exponent = B_IEEE754[30:23];
                          A_IEEE754_mantissa = {1'b1, A_IEEE754[22:0]};
                          B_IEEE754_mantissa = {1'b1, B_IEEE754[22:0]};
                          
                          result_sign = A_IEEE754_sign ^ B_IEEE754_sign;
                          result_exponent = A_IEEE754_exponent + B_IEEE754_exponent - 127;
                          result_mantissa = A_IEEE754_mantissa * B_IEEE754_mantissa;
                          
                          if(result_mantissa[47] == 1) begin
                             temp_mantissa = result_mantissa[46:24];
                             result_exponent = result_exponent + 1;
                          end else begin
                              if (result_mantissa [46] == 1) begin
                              temp_mantissa = result_mantissa[45:23];
                              end else begin
                                  flag = 0;
                                  for( i = 45; i >= 0; i = i - 1) begin
                                  if (result_mantissa[i] == 1 && flag == 0) begin
                                      result_exponent = result_exponent - (45 - i);
                                      temp_mantissa = result_mantissa[i-1 -: 23];
                                      flag = 1;
                                      end
                                  end
                              end
                           end
                           if(temp_mantissa[23] == 1)begin
                              result_exponent = result_exponent + 1;
                              temp_mantissa = temp_mantissa >> 1;
                           end
                           result = {result_sign, result_exponent, temp_mantissa[22:0]};
                     end
                     default: result = 32'b0;
                              
                 endcase
    end
endmodule
