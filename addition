module ADDITION_TB;
    reg signed [15:0] A_integer;
    reg [31:0] A_fraction;
    reg signed [15:0] B_integer;
    reg [31:0] B_fraction;
    reg [3:0] opcode;
    wire [31:0] A_binary;
    wire [31:0] B_binary;
    wire [31:0] A_IEEE754;
    wire [31:0] B_IEEE754;
    wire [31:0] result;
    wire carry;
    
    ALU_IEEE754 uut (
     .A_integer(A_integer),
     .A_fraction(A_fraction),
     .B_integer(B_integer),
     .B_fraction(B_fraction),
     .opcode(opcode),
     .A_binary(A_binary),
     .B_binary(B_binary),
     .A_IEEE754(A_IEEE754),
     .B_IEEE754(B_IEEE754),
     .result(result),
     .carry(carry)
     );
     initial begin
         // Initialize inputs
        A_integer = 16'd20;           // Example integer part of A
        A_fraction = 32'd500000000;  // Example fractional part of A (0.5)
        B_integer = -16'd25;           // Example integer part of B
        B_fraction = 32'd250000000;  // Example fractional part of B (0.25)
        opcode = 4'b1000;            // Operation code for IEEE 754 addition

        // Display initial values
        $display("Initial Values:");
        $display("A_integer = %d, A_fraction = %d", A_integer, A_fraction);
        $display("B_integer = %d, B_fraction = %d", B_integer, B_fraction);
        $display("opcode = %b", opcode);
        #10;
        
        // Display results
        $display("Results:");
        $display("A_binary = %b", A_binary);
        $display("B_binary = %b", B_binary);
        $display("A_IEEE754 = %b", A_IEEE754);
        $display("B_IEEE754 = %b", B_IEEE754);
        $display("result = %b", result);
        $display("carry = %b", carry);
        
        $stop;
     end
endmodule
