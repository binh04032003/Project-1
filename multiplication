module Multiplication_TB;
    reg signed [15:0] A_integer;
    reg [31:0] A_fraction;
    reg signed [15:0] B_integer;
    reg [31:0] B_fraction;
    reg [3:0] opcode;
    wire [31:0] A_binary;
    wire [31:0] B_binary;
    wire [31:0] A_IEEE754;
    wire [31:0] B_IEEE754;
    wire [31:0] result;
    wire carry;
    
    ALU_IEEE754 uut (
     .A_integer(A_integer),
     .A_fraction(A_fraction),
     .B_integer(B_integer),
     .B_fraction(B_fraction),
     .opcode(opcode),
     .A_binary(A_binary),
     .B_binary(B_binary),
     .A_IEEE754(A_IEEE754),
     .B_IEEE754(B_IEEE754),
     .result(result),
     .carry(carry)
     );
     initial begin

        A_integer = 16'd1;
        A_fraction = 32'd0;    // 1.0 in IEEE 754 format
        B_integer = 16'd2;
        B_fraction = 32'd0;    // 2.0 in IEEE 754 format
        opcode = 4'b1001;      // Opcode for multiplication

        // Wait for the results
        #10;
        
        // Display results
        $display("Test 1: A = 1.0, B = 2.0");
        $display("A_IEEE754 = %b", A_IEEE754);
        $display("B_IEEE754 = %b", B_IEEE754);
        $display("Result = %b", result);
        
        // Test case 2
        A_integer = -16'd3;
        A_fraction = 32'd0;    // 3.0 in IEEE 754 format
        B_integer = 16'd1;
        B_fraction = 32'd220000000;    // 4.2 in IEEE 754 format
        opcode = 4'b1001;      // Opcode for multiplication

        // Wait for the results
        #10;

        // Display results
        $display("Test 2: A = -3.0, B = 1.22");
        $display("A_IEEE754 = %b", A_IEEE754);
        $display("B_IEEE754 = %b", B_IEEE754);
        $display("Result = %b", result);
        
        $stop;
        end
endmodule
